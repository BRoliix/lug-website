
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin.
    // It reads the 'isAdmin' field from the user's document in the 'users' collection.
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Default deny all access unless explicitly allowed by the rules below.
    match /{document=**} {
      allow read, write: if false;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Admins can read and write to any user document.
      allow read, write: if isAdmin(request.auth.uid);
      // A user can read their own document.
      allow read: if request.auth.uid == userId;
    }

    // Rules for the 'messages' collection (forum).
    match /messages/{messageId} {
      // Any authenticated user can read and create messages.
      allow read, create: if request.auth.uid != null;
      // Only admins can delete messages.
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Rules for the 'events' collection.
    match /events/{eventId} {
      // Anyone can read events.
      allow read: if true;
      // Only admins can create, update, or delete events.
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    // Rules for the 'council' collection.
    match /council/{memberId} {
       // Anyone can read council member data.
      allow read: if true;
      // Only admins can create, update, or delete council members.
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    // Rules for aggregated data like counts.
    match /aggregates/counts {
      // Anyone can read the counts.
      allow read: if true;
      // Only admins can update the counts (e.g., via a Cloud Function, not directly from the client).
      allow write: if isAdmin(request.auth.uid);
    }
  }
}
