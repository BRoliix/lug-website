
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user is authenticated and if their user document has isAdmin set to true.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // USERS
    match /users/{userId} {
      // Admins can read/write any user document.
      // Users can only read/write their own document.
      allow read, write: if isAdmin() || request.auth.uid == userId;
    }
     match /users/{documents=**} {
      // Admins can list all users.
      allow list: if isAdmin();
    }


    // EVENTS
    match /events/{eventId} {
      // Anyone can read events.
      allow read: if true;
      // Only admins can create, update, delete events.
      allow write: if isAdmin();
    }
    match /events/{documents=**} {
      // Admins can list all events.
      allow list: if isAdmin();
    }

    // COUNCIL
    match /council/{memberId} {
        // Anyone can read council members.
        allow read: if true;
        // Only admins can write.
        allow write: if isAdmin();
    }
    match /council/{documents=**} {
      // Admins can list all council members.
      allow list: if isAdmin();
    }

    // MESSAGES (FORUM)
    match /messages/{messageId} {
      // Anyone can read messages.
      allow read: if true;
      // Only authenticated users can create messages.
      allow create: if request.auth != null;
      // Only admins or the user who created it can delete.
      // Note: This relies on storing the user's name, which might not be unique.
      // A more robust solution would use the user's UID.
      allow delete: if isAdmin() || resource.data.user == request.auth.token.name;
    }
     match /messages/{documents=**} {
      // Admins can list all messages.
      allow list: if isAdmin();
    }
  }
}
